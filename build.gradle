plugins {
    id "java"
    id("com.diffplug.spotless") version "6.24.0"
}

group = "black.bracken"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

configurations {
    embed
    compileOnly.extendsFrom(embed)
}

dependencies {
    def paperApiVersion = "1.20.4-R0.1-SNAPSHOT"
    compileOnly "io.papermc.paper:paper-api:$paperApiVersion"
    testCompileOnly "io.papermc.paper:paper-api:$paperApiVersion"

    def vavrVersion = "0.10.4"
    embed "io.vavr:vavr:$vavrVersion"
    testCompileOnly "io.vavr:vavr:$vavrVersion"

    def lombokVersion = "1.18.30"
    embed "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testImplementation "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    def guiceVersion = "7.0.0"
    embed "com.google.inject:guice:$guiceVersion"
    testImplementation "com.google.inject:guice:$guiceVersion"

    def rxJavaVersion = "3.1.8"
    embed "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
    testImplementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"

    def junitVersion = "5.10.1"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"

    def truthVersion = "1.2.0"
    testImplementation "com.google.truth:truth:$truthVersion"
}

jar {
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

spotless {
    ratchetFrom 'origin/master'

    java {
        trimTrailingWhitespace()
        endWithNewline()
        removeUnusedImports()
        importOrder()

        prettier().configFile("./.prettierrc.yml")
        formatAnnotations()
    }
}